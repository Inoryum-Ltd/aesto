{"version":3,"file":"express.js","sourceRoot":"","sources":["../../src/integrations/express.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { Application, ErrorRequestHandler, NextFunction, Request, RequestHandler, Response } from 'express';\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework\n * as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Express.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * Express App instance\n   */\n  private readonly _app?: Application;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Application } = {}) {\n    this._app = options.app;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._app) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._app, getCurrentHub);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n */\nfunction wrap(fn: Function, getCurrentHub: () => Hub): RequestHandler | ErrorRequestHandler {\n  const arrity = fn.length;\n\n  switch (arrity) {\n    case 2: {\n      return function(this: NodeJS.Global, _req: Request, res: Response): any {\n        const span = getCurrentHub().startSpan({\n          description: fn.name,\n          op: 'middleware',\n        });\n        res.once('finish', () => span.finish());\n        return fn.apply(this, arguments);\n      };\n    }\n    case 3: {\n      return function(this: NodeJS.Global, req: Request, res: Response, next: NextFunction): any {\n        const span = getCurrentHub().startSpan({\n          description: fn.name,\n          op: 'middleware',\n        });\n        fn.call(this, req, res, function(this: NodeJS.Global): any {\n          span.finish();\n          return next.apply(this, arguments);\n        });\n      };\n    }\n    case 4: {\n      return function(this: NodeJS.Global, err: any, req: Request, res: Response, next: NextFunction): any {\n        const span = getCurrentHub().startSpan({\n          description: fn.name,\n          op: 'middleware',\n        });\n        fn.call(this, err, req, res, function(this: NodeJS.Global): any {\n          span.finish();\n          return next.apply(this, arguments);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arrity}`);\n    }\n  }\n}\n\n/**\n * Takes all the function arguments passed to the original `app.use` call\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapUseArgs(args: IArguments, getCurrentHub: () => Hub): unknown[] {\n  return Array.from(args).map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg, getCurrentHub);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a, getCurrentHub);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original app.use to utilize our tracing functionality\n */\nfunction instrumentMiddlewares(app: Application, getCurrentHub: () => Hub): Application {\n  const originalAppUse = app.use;\n  app.use = function(): any {\n    return originalAppUse.apply(this, wrapUseArgs(arguments, getCurrentHub));\n  };\n  return app;\n}\n"]}