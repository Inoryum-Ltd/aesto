{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../src/integrations/tracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub, Scope } from '@sentry/hub';\nimport { Event, EventProcessor, Integration, Span, SpanContext, SpanStatus } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getGlobalObject,\n  isMatchingPattern,\n  logger,\n  supportsNativeFetch,\n} from '@sentry/utils';\n\nimport { Span as SpanClass } from '../span';\n\n/**\n * Options for Tracing integration\n */\ninterface TracingOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//]\n   */\n  tracingOrigins: Array<string | RegExp>;\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest(url: string): boolean;\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 500\n   */\n  idleTimeout: number;\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes. Useful for react applications with\n   * a router.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be discarded. This is for some edge cases where a browser\n   * completely freezes the JS state and picks it up later (background tabs).\n   * So after this duration, the SDK will not send the event.\n   * If you want to have an unlimited duration set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag to discard all spans that occur in background. This includes transactions. Browser background tab timing is\n   * not suited towards doing precise measurements of operations. That's why this option discards any active transaction\n   * and also doesn't add any spans that happen in the background. Background spans/transaction can mess up your\n   * statistics in non deterministic ways that's why we by default recommend leaving this opition enabled.\n   *\n   * Default: true\n   */\n  discardBackgroundSpans: boolean;\n}\n\n/** JSDoc */\ninterface Activity {\n  name: string;\n  span?: Span;\n}\n\nconst global = getGlobalObject<Window>();\nconst defaultTracingOrigins = ['localhost', /^\\//];\n\n/**\n * Tracing Integration\n */\nexport class Tracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Tracing.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Tracing';\n\n  /** JSDoc */\n  public static options: TracingOptions;\n\n  /**\n   * Returns current hub.\n   */\n  private static _getCurrentHub?: () => Hub;\n\n  private static _activeTransaction?: Span;\n\n  private static _currentIndex: number = 1;\n\n  public static _activities: { [key: number]: Activity } = {};\n\n  private static _debounce: number = 0;\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  private static _performanceCursor: number = 0;\n\n  private static _heartbeatTimer: number = 0;\n\n  private static _prevHeartbeatString: string | undefined;\n\n  private static _heartbeatCounter: number = 0;\n\n  /**\n   * Constructor for Tracing\n   *\n   * @param _options TracingOptions\n   */\n  public constructor(_options?: Partial<TracingOptions>) {\n    if (global.performance) {\n      global.performance.mark('sentry-tracing-init');\n    }\n    const defaults = {\n      discardBackgroundSpans: true,\n      idleTimeout: 500,\n      maxTransactionDuration: 600,\n      shouldCreateSpanForRequest(url: string): boolean {\n        const origins = (_options && _options.tracingOrigins) || defaultTracingOrigins;\n        return (\n          origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n          !isMatchingPattern(url, 'sentry_key')\n        );\n      },\n      startTransactionOnLocationChange: true,\n      traceFetch: true,\n      traceXHR: true,\n      tracingOrigins: defaultTracingOrigins,\n    };\n    // NOTE: Logger doesn't work in contructors, as it's initialized after integrations instances\n    if (!_options || !Array.isArray(_options.tracingOrigins) || _options.tracingOrigins.length === 0) {\n      this._emitOptionsWarning = true;\n    }\n    Tracing.options = {\n      ...defaults,\n      ..._options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    Tracing._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(`[Tracing] We added a reasonable default for you: ${defaultTracingOrigins}`);\n    }\n\n    // Starting our inital pageload transaction\n    if (global.location && global.location.href) {\n      // `${global.location.href}` will be used a temp transaction name\n      Tracing.startIdleTransaction(global.location.href, {\n        op: 'pageload',\n      });\n    }\n\n    this._setupXHRTracing();\n\n    this._setupFetchTracing();\n\n    this._setupHistory();\n\n    this._setupErrorHandling();\n\n    this._setupBackgroundTabDetection();\n\n    Tracing._pingHeartbeat();\n\n    // This EventProcessor makes sure that the transaction is not longer than maxTransactionDuration\n    addGlobalEventProcessor((event: Event) => {\n      const self = getCurrentHub().getIntegration(Tracing);\n      if (!self) {\n        return event;\n      }\n\n      const isOutdatedTransaction =\n        event.timestamp &&\n        event.start_timestamp &&\n        (event.timestamp - event.start_timestamp > Tracing.options.maxTransactionDuration ||\n          event.timestamp - event.start_timestamp < 0);\n\n      if (Tracing.options.maxTransactionDuration !== 0 && event.type === 'transaction' && isOutdatedTransaction) {\n        logger.log('[Tracing] Discarded transaction since it maxed out maxTransactionDuration');\n        return null;\n      }\n\n      return event;\n    });\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private static _pingHeartbeat(): void {\n    Tracing._heartbeatTimer = (setTimeout(() => {\n      Tracing._beat();\n    }, 5000) as any) as number;\n  }\n\n  /**\n   * Checks when entries of Tracing._activities are not changing for 3 beats. If this occurs we finish the transaction\n   *\n   */\n  private static _beat(): void {\n    clearTimeout(Tracing._heartbeatTimer);\n    const keys = Object.keys(Tracing._activities);\n    if (keys.length) {\n      const heartbeatString = keys.reduce((prev: string, current: string) => prev + current);\n      if (heartbeatString === Tracing._prevHeartbeatString) {\n        Tracing._heartbeatCounter++;\n      } else {\n        Tracing._heartbeatCounter = 0;\n      }\n      if (Tracing._heartbeatCounter >= 3) {\n        if (Tracing._activeTransaction) {\n          logger.log(\n            \"[Tracing] Heartbeat safeguard kicked in, finishing transaction since activities content hasn't changed for 3 beats\",\n          );\n          Tracing._activeTransaction.setStatus(SpanStatus.DeadlineExceeded);\n          Tracing._activeTransaction.setTag('heartbeat', 'failed');\n          Tracing.finishIdleTransaction();\n        }\n      }\n      Tracing._prevHeartbeatString = heartbeatString;\n    }\n    Tracing._pingHeartbeat();\n  }\n\n  /**\n   * Discards active transactions if tab moves to background\n   */\n  private _setupBackgroundTabDetection(): void {\n    if (Tracing.options.discardBackgroundSpans && global.document) {\n      document.addEventListener('visibilitychange', () => {\n        if (document.hidden && Tracing._activeTransaction) {\n          logger.log('[Tracing] Discarded active transaction incl. activities since tab moved to the background');\n          Tracing._resetActiveTransaction();\n        }\n      });\n    }\n  }\n\n  /**\n   * Unsets the current active transaction + activities\n   */\n  private static _resetActiveTransaction(): void {\n    // We want to clean up after ourselves\n    // If there is still the active transaction on the scope we remove it\n    const _getCurrentHub = Tracing._getCurrentHub;\n    if (_getCurrentHub) {\n      const hub = _getCurrentHub();\n      const scope = hub.getScope();\n      if (scope) {\n        if (scope.getSpan() === Tracing._activeTransaction) {\n          scope.setSpan(undefined);\n        }\n      }\n    }\n    // ------------------------------------------------------------------\n    Tracing._activeTransaction = undefined;\n    Tracing._activities = {};\n  }\n\n  /**\n   * Registers to History API to detect navigation changes\n   */\n  private _setupHistory(): void {\n    if (Tracing.options.startTransactionOnLocationChange) {\n      addInstrumentationHandler({\n        callback: historyCallback,\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Attaches to fetch to add sentry-trace header + creating spans\n   */\n  private _setupFetchTracing(): void {\n    if (Tracing.options.traceFetch && supportsNativeFetch()) {\n      addInstrumentationHandler({\n        callback: fetchCallback,\n        type: 'fetch',\n      });\n    }\n  }\n\n  /**\n   * Attaches to XHR to add sentry-trace header + creating spans\n   */\n  private _setupXHRTracing(): void {\n    if (Tracing.options.traceXHR) {\n      addInstrumentationHandler({\n        callback: xhrCallback,\n        type: 'xhr',\n      });\n    }\n  }\n\n  /**\n   * Configures global error listeners\n   */\n  private _setupErrorHandling(): void {\n    // tslint:disable-next-line: completed-docs\n    function errorCallback(): void {\n      if (Tracing._activeTransaction) {\n        /**\n         * If an error or unhandled promise occurs, we mark the active transaction as failed\n         */\n        logger.log(`[Tracing] Global error occured, setting status in transaction: ${SpanStatus.InternalError}`);\n        Tracing._activeTransaction.setStatus(SpanStatus.InternalError);\n      }\n    }\n    addInstrumentationHandler({\n      callback: errorCallback,\n      type: 'error',\n    });\n    addInstrumentationHandler({\n      callback: errorCallback,\n      type: 'unhandledrejection',\n    });\n  }\n\n  /**\n   * Starts a Transaction waiting for activity idle to finish\n   */\n  public static startIdleTransaction(name: string, spanContext?: SpanContext): Span | undefined {\n    // If we already have an active transaction it means one of two things\n    // a) The user did rapid navigation changes and didn't wait until the transaction was finished\n    // b) A activity wasn't popped correctly and therefore the transaction is stalling\n    Tracing.finishIdleTransaction();\n\n    logger.log('[Tracing] startIdleTransaction, name:', name);\n\n    const _getCurrentHub = Tracing._getCurrentHub;\n    if (!_getCurrentHub) {\n      return undefined;\n    }\n\n    const hub = _getCurrentHub();\n    if (!hub) {\n      return undefined;\n    }\n\n    Tracing._activeTransaction = hub.startSpan({\n      ...spanContext,\n      transaction: name,\n    });\n\n    // We set the transaction on the scope so if there are any other spans started outside of this integration\n    // we also add them to this transaction.\n    // Once the idle transaction is finished, we make sure to remove it again.\n    hub.configureScope((scope: Scope) => {\n      scope.setSpan(Tracing._activeTransaction);\n    });\n\n    // The reason we do this here is because of cached responses\n    // If we start and transaction without an activity it would never finish since there is no activity\n    const id = Tracing.pushActivity('idleTransactionStarted');\n    setTimeout(() => {\n      Tracing.popActivity(id);\n    }, (Tracing.options && Tracing.options.idleTimeout) || 100);\n\n    return Tracing._activeTransaction;\n  }\n\n  /**\n   * Finshes the current active transaction\n   */\n  public static finishIdleTransaction(): void {\n    const active = Tracing._activeTransaction as SpanClass;\n    if (active) {\n      Tracing._addPerformanceEntries(active);\n      logger.log('[Tracing] finishIdleTransaction', active.transaction);\n      active.finish(/*trimEnd*/ true);\n      Tracing._resetActiveTransaction();\n    }\n  }\n\n  /**\n   * This uses `performance.getEntries()` to add additional spans to the active transaction.\n   * Also, we update our timings since we consider the timings in this API to be more correct than our manual\n   * measurements.\n   *\n   * @param transactionSpan The transaction span\n   */\n  private static _addPerformanceEntries(transactionSpan: SpanClass): void {\n    if (!global.performance) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = Tracing._msToSec(performance.timeOrigin);\n\n    // tslint:disable-next-line: completed-docs\n    function addPerformanceNavigationTiming(parent: SpanClass, entry: { [key: string]: number }, event: string): void {\n      const span = parent.child({\n        description: event,\n        op: 'browser',\n      });\n      span.startTimestamp = timeOrigin + Tracing._msToSec(entry[`${event}Start`]);\n      span.timestamp = timeOrigin + Tracing._msToSec(entry[`${event}End`]);\n    }\n\n    // tslint:disable-next-line: completed-docs\n    function addRequest(parent: SpanClass, entry: { [key: string]: number }): void {\n      const request = parent.child({\n        description: 'request',\n        op: 'browser',\n      });\n      request.startTimestamp = timeOrigin + Tracing._msToSec(entry.requestStart);\n      request.timestamp = timeOrigin + Tracing._msToSec(entry.responseEnd);\n\n      const response = parent.child({\n        description: 'response',\n        op: 'browser',\n      });\n      response.startTimestamp = timeOrigin + Tracing._msToSec(entry.responseStart);\n      response.timestamp = timeOrigin + Tracing._msToSec(entry.responseEnd);\n    }\n\n    let entryScriptSrc: string | undefined;\n\n    if (global.document) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < document.scripts.length; i++) {\n        // We go through all scripts on the page and look for 'data-entry'\n        // We remember the name and measure the time between this script finished loading and\n        // our mark 'sentry-tracing-init'\n        if (document.scripts[i].dataset.entry === 'true') {\n          entryScriptSrc = document.scripts[i].src;\n          break;\n        }\n      }\n    }\n\n    let entryScriptStartEndTime: number | undefined;\n    let tracingInitMarkStartTime: number | undefined;\n\n    // tslint:disable: no-unsafe-any\n    performance\n      .getEntries()\n      .slice(Tracing._performanceCursor)\n      .forEach((entry: any) => {\n        const startTime = Tracing._msToSec(entry.startTime as number);\n        const duration = Tracing._msToSec(entry.duration as number);\n\n        if (transactionSpan.op === 'navigation' && timeOrigin + startTime < transactionSpan.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation':\n            addPerformanceNavigationTiming(transactionSpan, entry, 'unloadEvent');\n            addPerformanceNavigationTiming(transactionSpan, entry, 'domContentLoadedEvent');\n            addPerformanceNavigationTiming(transactionSpan, entry, 'loadEvent');\n            addPerformanceNavigationTiming(transactionSpan, entry, 'connect');\n            addPerformanceNavigationTiming(transactionSpan, entry, 'domainLookup');\n            addRequest(transactionSpan, entry);\n            break;\n          case 'mark':\n          case 'paint':\n          case 'measure':\n            const mark = transactionSpan.child({\n              description: `${entry.entryType} ${entry.name}`,\n              op: 'mark',\n            });\n            mark.startTimestamp = timeOrigin + startTime;\n            mark.timestamp = mark.startTimestamp + duration;\n            if (tracingInitMarkStartTime === undefined && entry.name === 'sentry-tracing-init') {\n              tracingInitMarkStartTime = mark.startTimestamp;\n            }\n            break;\n          case 'resource':\n            const resourceName = entry.name.replace(window.location.origin, '');\n            if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n              // We need to update existing spans with new timing info\n              if (transactionSpan.spanRecorder) {\n                transactionSpan.spanRecorder.spans.map((finishedSpan: SpanClass) => {\n                  if (finishedSpan.description && finishedSpan.description.indexOf(resourceName) !== -1) {\n                    finishedSpan.startTimestamp = timeOrigin + startTime;\n                    finishedSpan.timestamp = finishedSpan.startTimestamp + duration;\n                  }\n                });\n              }\n            } else {\n              const resource = transactionSpan.child({\n                description: `${entry.initiatorType} ${resourceName}`,\n                op: `resource`,\n              });\n              resource.startTimestamp = timeOrigin + startTime;\n              resource.timestamp = resource.startTimestamp + duration;\n              // We remember the entry script end time to calculate the difference to the first init mark\n              if (entryScriptStartEndTime === undefined && (entryScriptSrc || '').includes(resourceName)) {\n                entryScriptStartEndTime = resource.timestamp;\n              }\n            }\n            break;\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    if (entryScriptStartEndTime !== undefined && tracingInitMarkStartTime !== undefined) {\n      const evaluation = transactionSpan.child({\n        description: 'evaluation',\n        op: `script`,\n      });\n      evaluation.startTimestamp = entryScriptStartEndTime;\n      evaluation.timestamp = tracingInitMarkStartTime;\n    }\n\n    Tracing._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    // tslint:enable: no-unsafe-any\n  }\n\n  /**\n   * Sets the status of the current active transaction (if there is one)\n   */\n  public static setTransactionStatus(status: SpanStatus): void {\n    const active = Tracing._activeTransaction;\n    if (active) {\n      logger.log('[Tracing] setTransactionStatus', status);\n      active.setStatus(status);\n    }\n  }\n\n  /**\n   * Converts from milliseconds to seconds\n   * @param time time in ms\n   */\n  private static _msToSec(time: number): number {\n    return time / 1000;\n  }\n\n  /**\n   * Starts tracking for a specifc activity\n   *\n   * @param name Name of the activity, can be any string (Only used internally to identify the activity)\n   * @param spanContext If provided a Span with the SpanContext will be created.\n   * @param options _autoPopAfter_ | Time in ms, if provided the activity will be popped automatically after this timeout. This can be helpful in cases where you cannot gurantee your application knows the state and calls `popActivity` for sure.\n   */\n  public static pushActivity(\n    name: string,\n    spanContext?: SpanContext,\n    options?: {\n      autoPopAfter?: number;\n    },\n  ): number {\n    const activeTransaction = Tracing._activeTransaction;\n\n    if (!activeTransaction) {\n      logger.log(`[Tracing] Not pushing activity ${name} since there is no active transaction`);\n      return 0;\n    }\n\n    // We want to clear the timeout also here since we push a new activity\n    clearTimeout(Tracing._debounce);\n\n    const _getCurrentHub = Tracing._getCurrentHub;\n    if (spanContext && _getCurrentHub) {\n      const hub = _getCurrentHub();\n      if (hub) {\n        const span = activeTransaction.child(spanContext);\n        Tracing._activities[Tracing._currentIndex] = {\n          name,\n          span,\n        };\n      }\n    } else {\n      Tracing._activities[Tracing._currentIndex] = {\n        name,\n      };\n    }\n\n    logger.log(`[Tracing] pushActivity: ${name}#${Tracing._currentIndex}`);\n    logger.log('[Tracing] activies count', Object.keys(Tracing._activities).length);\n    if (options && typeof options.autoPopAfter === 'number') {\n      logger.log(`[Tracing] auto pop of: ${name}#${Tracing._currentIndex} in ${options.autoPopAfter}ms`);\n      const index = Tracing._currentIndex;\n      setTimeout(() => {\n        Tracing.popActivity(index, {\n          autoPop: true,\n          status: SpanStatus.DeadlineExceeded,\n        });\n      }, options.autoPopAfter);\n    }\n    return Tracing._currentIndex++;\n  }\n\n  /**\n   * Removes activity and finishes the span in case there is one\n   */\n  public static popActivity(id: number, spanData?: { [key: string]: any }): void {\n    // The !id is on purpose to also fail with 0\n    // Since 0 is returned by push activity in case there is no active transaction\n    if (!id) {\n      return;\n    }\n\n    const activity = Tracing._activities[id];\n\n    if (activity) {\n      logger.log(`[Tracing] popActivity ${activity.name}#${id}`);\n      const span = activity.span;\n      if (span) {\n        if (spanData) {\n          Object.keys(spanData).forEach((key: string) => {\n            span.setData(key, spanData[key]);\n            if (key === 'status_code') {\n              span.setHttpStatus(spanData[key] as number);\n            }\n            if (key === 'status') {\n              span.setStatus(spanData[key] as SpanStatus);\n            }\n          });\n        }\n        span.finish();\n      }\n      // tslint:disable-next-line: no-dynamic-delete\n      delete Tracing._activities[id];\n    }\n\n    const count = Object.keys(Tracing._activities).length;\n    clearTimeout(Tracing._debounce);\n\n    logger.log('[Tracing] activies count', count);\n\n    if (count === 0 && Tracing._activeTransaction) {\n      const timeout = Tracing.options && Tracing.options.idleTimeout;\n      logger.log(`[Tracing] Flushing Transaction in ${timeout}ms`);\n      Tracing._debounce = (setTimeout(() => {\n        Tracing.finishIdleTransaction();\n      }, timeout) as any) as number;\n    }\n  }\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction xhrCallback(handlerData: { [key: string]: any }): void {\n  if (!Tracing.options.traceXHR) {\n    return;\n  }\n\n  // tslint:disable-next-line: no-unsafe-any\n  if (!handlerData || !handlerData.xhr || !handlerData.xhr.__sentry_xhr__) {\n    return;\n  }\n\n  // tslint:disable: no-unsafe-any\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  if (!Tracing.options.shouldCreateSpanForRequest(xhr.url)) {\n    return;\n  }\n\n  // We only capture complete, non-sentry requests\n  if (handlerData.xhr.__sentry_own_request__) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_activity_id__) {\n    Tracing.popActivity(handlerData.xhr.__sentry_xhr_activity_id__, handlerData.xhr.__sentry_xhr__);\n    return;\n  }\n\n  handlerData.xhr.__sentry_xhr_activity_id__ = Tracing.pushActivity('xhr', {\n    data: {\n      ...xhr.data,\n      type: 'xhr',\n    },\n    description: `${xhr.method} ${xhr.url}`,\n    op: 'http',\n  });\n\n  // Adding the trace header to the span\n  const activity = Tracing._activities[handlerData.xhr.__sentry_xhr_activity_id__];\n  if (activity) {\n    const span = activity.span;\n    if (span && handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n  // tslint:enable: no-unsafe-any\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction fetchCallback(handlerData: { [key: string]: any }): void {\n  // tslint:disable: no-unsafe-any\n  if (!Tracing.options.traceFetch) {\n    return;\n  }\n\n  if (!Tracing.options.shouldCreateSpanForRequest(handlerData.fetchData.url)) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__activity) {\n    Tracing.popActivity(handlerData.fetchData.__activity, handlerData.fetchData);\n  } else {\n    handlerData.fetchData.__activity = Tracing.pushActivity('fetch', {\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http',\n    });\n\n    const activity = Tracing._activities[handlerData.fetchData.__activity];\n    if (activity) {\n      const span = activity.span;\n      if (span) {\n        const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n        if (options.headers) {\n          if (Array.isArray(options.headers)) {\n            options.headers = [...options.headers, { 'sentry-trace': span.toTraceparent() }];\n          } else {\n            options.headers = {\n              ...options.headers,\n              'sentry-trace': span.toTraceparent(),\n            };\n          }\n        } else {\n          options.headers = { 'sentry-trace': span.toTraceparent() };\n        }\n      }\n    }\n  }\n  // tslint:enable: no-unsafe-any\n}\n\n/**\n * Creates transaction from navigation changes\n */\nfunction historyCallback(_: { [key: string]: any }): void {\n  if (Tracing.options.startTransactionOnLocationChange && global && global.location) {\n    Tracing.startIdleTransaction(global.location.href, {\n      op: 'navigation',\n    });\n  }\n}\n"]}